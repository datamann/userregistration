
.oauth2Login((oauth2Login) -> oauth2Login
			    .userInfoEndpoint((userInfo) -> userInfo
				    .userAuthoritiesMapper(grantedAuthoritiesMapper())
			    )
            )




private GrantedAuthoritiesMapper grantedAuthoritiesMapper() {
        
  return (authorities) -> {
      Set<GrantedAuthority> mappedAuthorities = new HashSet<>();

      authorities.forEach((authority) -> {
          GrantedAuthority mappedAuthority;

          if (authority instanceof OidcUserAuthority) {
              OidcUserAuthority userAuthority = (OidcUserAuthority) authority;
              mappedAuthority = new OidcUserAuthority(
                  "OIDC_USER", userAuthority.getIdToken(), userAuthority.getUserInfo());
          } else if (authority instanceof OAuth2UserAuthority) {
              OAuth2UserAuthority userAuthority = (OAuth2UserAuthority) authority;
              mappedAuthority = new OAuth2UserAuthority(
                  "OAUTH2_USER", userAuthority.getAttributes());
          } else {
              mappedAuthority = authority;
          }

          mappedAuthorities.add(mappedAuthority);
      });

      return mappedAuthorities;
  };
}