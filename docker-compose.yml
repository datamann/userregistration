version: '3.8'

services:
  db:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    expose:
      - 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userreg
    volumes:
        - ./postgresql:/var/lib/postgresql/data
    networks:
      - userregnetwork

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    ports:
      - "8081:8081"
    expose:
      - 8081
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_LISTEN_PORT: 8081
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    
    volumes:
      - ./pgadmin:/var/lib/pgadmin
      - ./docker_pgadmin_servers.json:/pgadmin4/servers.json

    entrypoint:
      - "/bin/sh"
      - "-c"
      - "/bin/echo 'db:5432:*:postgres:password' > /tmp/pgpassfile && chmod 600 /tmp/pgpassfile && /entrypoint.sh"
    
    networks:
      - userregnetwork

  opa:
    image: openpolicyagent/opa:edge-static-debug
    container_name: openpolicyagent
    restart: unless-stopped
    ports:
      - "8181:8181"
    expose:
      - 8181
    command: run --server -w --log-level debug /opa_policies # 'data.dnb.greeting'
    volumes:
      - ./opa_policies:/opa_policies
    networks:
      - userregnetwork

# docker run --name mykeycloak -p 8080:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=change_me quay.io/keycloak/keycloak:latest start-dev
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: mykeycloak
    restart: unless-stopped
    ports:
      - 8080:8080
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: change_me
    command: start-dev
    volumes:
      - ./keycloak:/opt/keycloak
    networks:
      - userregnetwork
  
  # https://www.openpolicyagent.org/docs/latest/kafka-authorization/
  # Kafka cluster. Download Kafka tool: https://www.kafkatool.com/download.html
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:6.2.1
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes
  #     - ZOOKEEPER_CLIENT_PORT=2181
  #   networks:
  #     - userregnetwork

  # kafka:
  #   image: confluentinc/cp-kafka:6.2.1
  #   container_name: kafka
  #   ports:
  #     - "9093:9093"
  #   environment:
  #     KAFKA_ADVERTISED_HOST_NAME: localhost
  #     # Set cache expiry to low value for development in order to see decisions
  #     KAFKA_OPA_AUTHORIZER_CACHE_EXPIRE_AFTER_SECONDS: 10
  #     KAFKA_OPA_AUTHORIZER_URL: http://opa:8181/v1/data/kafka/authz/allow
  #     KAFKA_AUTHORIZER_CLASS_NAME: org.openpolicyagent.kafka.OpaAuthorizer
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #     KAFKA_ADVERTISED_LISTENERS: SSL://localhost:9093
  #     KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #     #KAFKA_SSL_KEYSTORE_FILENAME: server.keystore
  #     #KAFKA_SSL_KEYSTORE_CREDENTIALS: credentials.txt
  #     #KAFKA_SSL_KEY_CREDENTIALS: credentials.txt
  #     #KAFKA_SSL_TRUSTSTORE_FILENAME: server.truststore
  #     #KAFKA_SSL_TRUSTSTORE_CREDENTIALS: credentials.txt
  #     #KAFKA_SSL_CLIENT_AUTH: required
  #     CLASSPATH: "/plugin/*"
  #   volumes:
  #     - "./plugin:/plugin"
  #     #- "./cert/server:/etc/kafka/secrets"
  #   depends_on:
  #     - opa
  #     - zookeeper
  #   networks:
  #     - userregnetwork

networks:
  userregnetwork:
    driver: bridge